import string

key = "wxy191iss00000000000cute"
ciphertext = "HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx".decode("base64")

def string_to_bits(data):
    data = [ord(c) for c in data]
    l = len(data) * 8
    result = [0] * l
    pos = 0
    for ch in data:
        for i in range(0,8):
            result[(pos<<3)+i] = (ch>>i) & 1
        pos += 1
    return result

def generate(o):
    k = permutate(s_box,o)
    b = []
    for i in range(0, len(k), 7):
        b.append(k[i:i+7] + [1])
    c = []
    for i in range(32):
		pos = 0
		x = 0
		for j in b[i]:
			x += (j<<pos)
			pos += 1
		c.append((0x10001**x) % (0x7f))
    return c

def permutate(table, block):
	return list(map(lambda x: block[x], table))

s_box = [54, 132, 138, 83, 16, 73, 187, 84, 146, 30, 95, 21, 148, 63, 65, 189, 188, 151, 72, 161, 116, 63, 161, 91, 37, 24, 126, 107, 87, 30, 117, 185, 98, 90, 0, 42, 140, 70, 86, 0, 42, 150, 54, 22, 144, 153, 36, 90, 149, 54, 156, 8, 59, 40, 110, 56,1, 84, 103, 22, 65, 17, 190, 41, 99, 151, 119, 124, 68, 17, 166, 125, 95, 65, 105, 133, 49, 19, 138, 29, 110, 7, 81, 134, 70, 87, 180, 78, 175, 108, 26, 121, 74, 29, 68, 162, 142, 177, 143, 86, 129, 101, 117, 41, 57, 34, 177, 103, 61, 135, 191, 74, 69, 147, 90, 49, 135, 124, 106, 19, 89, 38, 21, 41, 17, 155, 83, 38, 159, 179, 19, 157, 68, 105, 151, 166, 171, 122, 179, 114, 52, 183, 89, 107, 113, 65, 161, 141, 18, 121, 95, 4, 95, 101, 81, 156, 17, 190, 38, 84, 9, 171, 180, 59, 45, 15, 34, 89, 75, 164, 190, 140, 6, 41, 188, 77, 165, 105, 5, 107, 31, 183, 107, 141, 66, 63, 10, 9, 125, 50, 2, 153, 156, 162, 186, 76, 158, 153, 117, 9, 77, 156, 11, 145, 12, 169, 52, 57, 161, 7, 158, 110, 191, 43, 82, 186, 49, 102, 166, 31, 41, 5, 189, 27]

# The below function is the same as string_to_bits
def string_to_bits_syn(data):
	return "".join([bin(ord(i))[2:].zfill(8)[::-1] for i in key])

# Bits to string conversion
def bits_to_string(data):
	return "".join([chr(int(data[i:i+8][::-1], 2)) for i in range(0, len(data), 8)])

def gen_subkey(key):
        o = string_to_bits(key)
        k = []
        for i in range(8):
	        o = generate(o)
        	k.extend(o)
        	o = string_to_bits([chr(c) for c in o[0:24]])
        Kn = []
        for i in range(32):
            Kn.append(map(chr, k[i * 8: i * 8 + 8]))
        return Kn
Kn = gen_subkey(key)

def rev_round_add(a, b):
	f = lambda x, y: x + y - 2 * (x & y)
	res = ""
	for i in range(len(a)):
		for j in range(256):
			if chr(f(j, ord(b[i]))) == a[i]:
				res += chr(j)
				break
	return res


def rev_enc(data_block):
	L = data_block[:8]
	R = data_block[8:]
	L, R = R, L
	for round_cnt in range(31, -1, -1):
		assert len(L) == len(R)
		L, R = rev_round_add(R, Kn[round_cnt]), L
	return L + R

flag = ""
for i in range(0, 48, 16):
	flag += rev_enc(ciphertext[i:i+16])
print flag