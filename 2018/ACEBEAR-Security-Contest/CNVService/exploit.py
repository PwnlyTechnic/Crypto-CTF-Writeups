from pwn import *
from hashlib import md5

def xor(dest, src):
    if len(dest) == 0:
        return src
    elif len(src) == 0:
        return dest
    elif len(dest) >= len(src):
        return ''.join(chr(ord(dest[i])^ord(src[i])) for i in range(len(src)))
    else:
        return ''.join(chr(ord(dest[i])^ord(src[i])) for i in range(len(dest)))

def Register(name, username):
    r = remote('cnvservice.acebear.site', '1337')
    r.recvuntil("choice: ")
    r.send('1')
    r.recvuntil("Name: ")
    r.send(name+"\x00"*50)
    r.recvuntil("Username: ")
    r.send(username)
    cookie = r.recvline()[8:]
    r.close()
    return cookie

def Login(cookie):
    r = remote('cnvservice.acebear.site', '1337')
    r.recvuntil("choice: ")
    r.send('2')
    r.recvuntil("Cookie: ")
    r.send(cookie)
    message = r.recvall()
    r.close()
    return message

input_username = "roo7++++++++++++"
favorable_username = "root*+++++++++++"
cookie = Register('', input_username)
cookie = cookie.decode("base64")

#Vectors for XORing
iv = cookie[:16]
second_vector = md5(cookie[16:32]).digest()
third_vector = md5(cookie[32:48]).digest()

payload = xor(second_vector, favorable_username)
payload = xor(payload, third_vector)

# Registration
cookie2 = Register('', input_username + payload)
cookie2 = cookie2.decode("base64")
attack_block = cookie2[48:64]

#Logging in as root
attack_cookie = iv + cookie[16:32] + attack_block + cookie[32:]
print Login(attack_cookie.encode("base64"))
