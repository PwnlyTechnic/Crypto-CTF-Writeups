import itertools
from Crypto.Util.number import *
from hashlib import md5
import string

hack = 64364485357060434848865708402537097493512746702748009007197338675

# Generating all possible values of pad
factor_list = [3, 3, 5, 5, 7, 107, 487, 607, 28249, 29287, 420577267963, 3680317203978923, 1002528655290265069]
factor_combinations = [x for i in range(1, len(factor_list)-1) for x in itertools.combinations(factor_list, i)]
list1 = []
for i in range(len(factor_combinations)):
    prod = 1
    for j in factor_combinations[i]:
        prod *= j
    if prod not in list1:
        list1.append(prod)

# Possible values of pad
possible_pad = []
for i in list1:
    if size(i) == 128 and hack%i==0:
        possible_pad.append(i)

# Printing all the possible last characters
possible_lastchar = [chr(i) for i in list1 if i<256 and chr(i) in string.printable and chr(i) not in string.whitespace]
print possible_lastchar

def hack(plaintext):
    assert len(plaintext) == 14
    hack = 0
    pad = bytes_to_long(md5(flag).digest())
    for char in flag:
        hack += pad
        hack *= ord(char)
    return hack

def attack(pad1, last_char):
    temp_hack = hack
