
# This file was *autogenerated* from the file exploit.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4)
from sage.all import *
from Crypto.Util.number import *

obj1 = open("data.txt","r")
data = []
for i in obj1.readlines():
    data.append(i)
for i in range(len(data)):
    data[i] = int(data[i].strip("\n"))

a = [data[i] for i in range(_sage_const_0 ,len(data),_sage_const_4 )]
b = [data[i] for i in range(_sage_const_1 ,len(data),_sage_const_4 )]
c = [data[i] for i in range(_sage_const_2 ,len(data),_sage_const_4 )]
n = [data[i] for i in range(_sage_const_3 ,len(data),_sage_const_4 )]
t = []
N = _sage_const_1 
for i in n:
    N *= i

# Applying Chinese Remainder Theorem
for i in n:
    t.append(crt([_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],[i]+[j for j in n if j!=i]))

# Applying Coppersmith's Theorem
e = _sage_const_5 
gx = _sage_const_0 
P = PolynomialRing(Zmod(N), names=('x',)); (x,) = P._first_ngens(1)
for i in range(_sage_const_5 ):
    gx += t[i]*((a[i]*x+b[i])**e - c[i])
    
gx = gx.monic()
assert gx.is_monic()

list1 = gx.small_roots()
for i in list1:
    print long_to_bytes(i)

